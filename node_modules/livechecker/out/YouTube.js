"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const got = require("got");
class YouTube {
    /**
     * @param YTKey Your YouTube App's API key
     */
    constructor(YTKey) {
        this.YTKey = YTKey;
    }
    /**
     * Return some data about a channel.
     * In order to not spam the YouTube API, the default returned data is a boolean, this can be modified with 'part'.
     * @param channelid The ID of the channel
     * @param part The data to return. See https://developers.google.com/youtube/v3/docs/channels/list#part
     * @returns A boolean or the data of the channel
     */
    getChannel(channelid, part = ['id']) {
        let appthis = this;
        return new Promise(function (resolve, reject) {
            got(`https://www.googleapis.com/youtube/v3/channels?id=${channelid}&part=${part.join('%2')}&key=${appthis.YTKey}`)
                .then((resp) => {
                let data = JSON.parse(resp.body);
                if (data.pageInfo.totalResults > 0) {
                    resolve((part.length === 1 && part[0] === 'id') ? true : data);
                }
                else
                    resolve(undefined);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    /**
     * Return some data about the stream of a channel.
     * In order to not spam the YouTube API, the default returned data is a boolean, this can be modified with 'part'.
     * @param channelid The ID of the channel
     * @param part The data to return. See https://developers.google.com/youtube/v3/docs/search
     * @returns A boolean or the data of the stream
     */
    isStreaming(channelid, part = ['id']) {
        let appthis = this;
        return new Promise(function (resolve, reject) {
            got(`https://www.googleapis.com/youtube/v3/search?part=${part.join('%2')}&channelId=${channelid}&type=video&eventType=live&key=${appthis.YTKey}`)
                .then((resp) => {
                let data = JSON.parse(resp.body);
                if (data.pageInfo.totalResults > 0) {
                    resolve((part.length === 1 && part[0] === 'id') ? true : data);
                }
                else
                    resolve(undefined);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
}

exports.YouTube = YouTube;
